{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Telar-Social-Media-Architecture-using-Domain-Driven-Design-for-Microservices","result":{"data":{"markdownRemark":{"id":"913951da-c8eb-55d1-8d79-ecfe44b6bba4","html":"<h3 id=\"what-is-microservice\"><a href=\"#what-is-microservice\" aria-label=\"what is microservice permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is microservice</h3>\n<p>It’s a system design style that break your system to small independent microservices.</p>\n<h3 id=\"microservice-advantages\"><a href=\"#microservice-advantages\" aria-label=\"microservice advantages permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Microservice advantages</h3>\n<ul>\n<li>Easier to build and maintain project.</li>\n<li>Smaller and faster deployments.</li>\n<li>High scalability.</li>\n<li>Low impact on other services with isolation. </li>\n<li>Freedom to choose technology. </li>\n<li>Improve team productivity.\nand more advantages.</li>\n</ul>\n<h3 id=\"domain-driven-design-for-microservices\"><a href=\"#domain-driven-design-for-microservices\" aria-label=\"domain driven design for microservices permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Domain Driven Design for Microservices</h3>\n<p>Domain-Driven Design (DDD)—a design approach where the business domain is carefully modeled in software and evolved over time, independently. It used to build systems that have a complex business domain.</p>\n<h3 id=\"microservice-communication-in-telar-social\"><a href=\"#microservice-communication-in-telar-social\" aria-label=\"microservice communication in telar social permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Microservice Communication in Telar Social</h3>\n<ul>\n<li>Synchronous\nFront of each microservice is a Rest API. The client sends a request and waits for a response from the service. That’s independent of the client code execution that could be synchronous (thread is blocked) or asynchronous (thread isn’t blocked, and the response will reach a callback eventually). The important point here is that the protocol (HTTP/HTTPS) is synchronous and the client code can only continue its task when it receives the HTTP server response.</li>\n<li>Asynchronous Message Queuing\nIn this system, messages are persisted in a queue. One or more consumers can consume the messages in the queue, but a particular message can be consumed by a maximum of one consumer only. Once a consumer reads a message in the queue, it disappears from that queue. If there are no consumers available at the time the message is sent, it will be kept until a consumer is available that can process the message.</li>\n<li>Asynchronous Publish subscribe <strong>(Enterprise Edition)</strong>\nIn the publish-subscribe system, messages are persisted in a topic. Consumers can subscribe to one or more topics and consume all the messages in that topic. In the Publish-Subscribe system, message producers are called publishers and message consumers are called subscribers.</li>\n</ul>\n<h3 id=\"telar-social-microservice-architecture\"><a href=\"#telar-social-microservice-architecture\" aria-label=\"telar social microservice architecture permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Telar Social Microservice Architecture</h3>\n<p>In Telar Social following best practice architecture, Following this architecture:</p>\n<ul>\n<li>We can have different team with different technologies, different programming language and base on different </li>\n<li>We can config auto scaling for each microservice base on the metrics (like network traffic) to be specific for that microserice. By that we optimize resource usage and reduce the cost.</li>\n<li>In the case if a microservice crashes, other microservice continue their job giving service to the clients. </li>\n<li>Kubernetes do periodic checks on the health state of each microservice. If a microsevice fails consecutive health checks over an extended time period, Kubernetes initiates a repair process for that microservice.</li>\n<li>Change and maintain a microservice without influencing on other microservices. </li>\n<li>Each miroservice configuration is separated to different config file which is accessile via <code class=\"language-text\">config</code> directory from project root directory. Specially for <code class=\"language-text\">Enterprice</code> you can use different database for each microservice base on your business domain.</li>\n</ul>\n<p><strong>Community Edition Design on Kubernetes</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">         &lt;|&gt;                &lt;|&gt;  Rest API   &lt;|&gt;  Users  -&gt;  {User Authundefined User Profileundefined User Authentication}  \n         &lt;|&gt;                &lt;|&gt;  Rest API   &lt;|&gt;  Social -&gt;  {Circlesundefined User Relations}                                \n         &lt;|&gt;                &lt;|&gt;  Rest API   &lt;|&gt;             Actions                                                                                          \n         &lt;|&gt;                &lt;|&gt;  Rest API   &lt;|&gt;             Admin                                                                                          \n Client  &lt;|&gt; API Gateway    &lt;|&gt;  Rest API   &lt;|&gt;             Posts                                                             \n         &lt;|&gt;                &lt;|&gt;  Rest API   &lt;|&gt;             Comments                                                                                          \n         &lt;|&gt;                &lt;|&gt;  Rest API   &lt;|&gt;             Votes                                                             \n         &lt;|&gt;                &lt;|&gt;  Rest API   &lt;|&gt;             Gallery                                                              \n         &lt;|&gt;                &lt;|&gt;  Rest API   &lt;|&gt;             Notifications                                                                                          \n         &lt;|&gt;                &lt;|&gt;  Rest API   &lt;|&gt;             Storage   </code></pre></div>\n<ul>\n<li>Communication</li>\n<li>Client Send a synchronous request to API Gateway and waiting for the response from microservice.</li>\n<li>Client/Microservice Send an asynchronous request to API Gateway and pushing in the queue. In this method user do not wait for the response any more. After microservice is done with the job will call Action microservice(or other microservices) . Action microservice will send the appropriate action to UI dispatcher to update the user interface. (To learn more about Action Microservice read <a href=\"\">Flux Pattern for Server-Client interaction in Telar Social</a> article)</li>\n</ul>\n<p><strong>Enterprise Edition Design  on Kubernetes</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">         &lt;|&gt;              &lt;|&gt;  Rest API   &lt;|&gt;  Users  {User Authundefined User Profileundefined User Authentication}  \n         &lt;|&gt;              &lt;|&gt;  Rest API   &lt;|&gt;  Social {Circlesundefined User Relations}                                \n         &lt;|&gt;              &lt;|&gt;  Rest API   &lt;|&gt;         Admin                                                                                          \n         &lt;|&gt; API Gateway  &lt;|&gt;  Rest API   &lt;|&gt;         Posts                                                             \n  Client &lt;|&gt;              &lt;|&gt;  Rest API   &lt;|&gt;         Comments                                                                                          \n         &lt;|&gt;              &lt;|&gt;  Rest API   &lt;|&gt;         Votes                                                             \n         &lt;|&gt;              &lt;|&gt;  Rest API   &lt;|&gt;         Gallery                                                              \n         &lt;|&gt;              &lt;|&gt;  Rest API   &lt;|&gt;         Notifications                                                                                          \n         &lt;|&gt;              &lt;|&gt;  Rest API   &lt;|&gt;         Storage                                                           \n\n&lt;|&gt;                   &lt;|&gt;  Database                       \n&lt;|&gt;                   &lt;|&gt;  Database \n&lt;|&gt;                   &lt;|&gt;  Database \n&lt;|&gt;                   &lt;|&gt;  Database \n&lt;|&gt;   Action Pub/Sub  &lt;|&gt;  Database\n&lt;|&gt;  (Message Broker) &lt;|&gt;  Database\n&lt;|&gt;                   &lt;|&gt;  Database\n&lt;|&gt;                   &lt;|&gt;  Database\n&lt;|&gt;                   &lt;|&gt;  Database</code></pre></div>\n<ul>\n<li>Communication\nFor <strong>Enterprise Edition</strong>, in addition to <strong>Community Edition</strong> communication, we provided <code class=\"language-text\">Pub/Sub</code> using <code class=\"language-text\">Kafka</code>. Microservices are subscribing to <code class=\"language-text\">Kafka topics</code>and when a message received the function will be executed handling the message. In this pattern a message can be consumed with many functions at the same time.</li>\n</ul>\n<h2 id=\"directory-structure-server-side\"><a href=\"#directory-structure-server-side\" aria-label=\"directory structure server side permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Directory Structure (server-side)</h2>\n<p><strong>Core</strong>: Including core operations on Telar Social. We keep the src/core as the most stable layer that other layers use in common.</p>\n<p><strong>Controller</strong> : The Controller handle any incoming request from API Gateway. Controllers including functions called <code class=\"language-text\">handler</code> which handles incoming browser requests, retrieves necessary model data and returns appropriate responses.</p>\n<p><strong>Services</strong>: Do the data operations on your domain.</p>\n<p><strong>Web</strong>: Including Telar Social frontend using ReactJS.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root-directory\n├── src\n│   ├── core\n│   │   ├── config\n│   │   ├── data\n│   │   │   ├── Client-DB\n│   │   │   └── <span class=\"token punctuation\">..</span>.\n│   │   ├── server\n│   │   ├── utils\n│   │   └── <span class=\"token punctuation\">..</span>.\n│   ├── domain\n│   │   ├── domain-name-1\n│   │   ├── domain-name-2\n│   │   │   ├── sub-domain-name-1\n│   │   │   ├── sub-domain-name-2\n│   │   │   └── <span class=\"token punctuation\">..</span>.\n│   │   └── <span class=\"token punctuation\">..</span>.\n│   ├── constants\n│   ├── controllers\n│   │   ├── domain-name-1\n│   │   │   ├── handlers\n│   │   │   ├── config\n│   │   │   └── vendor\n│   │   ├── domain-name-2\n│   │   │   ├── sub-domain-name-1\n│   │   │   │   ├── handlers\n│   │   │   │   ├── config\n│   │   │   │   └── vendor\n│   │   │   ├── sub-domain-name-2\n│   │   │   │   ├── handlers\n│   │   │   │   ├── config\n│   │   │   │   └── vendor\n│   │   │   └── <span class=\"token punctuation\">..</span>.\n│   │   └── <span class=\"token punctuation\">..</span>.\n│   ├── models\n│   │   ├── domain-name-1\n│   │   ├── domain-name-2\n│   │   │   ├── sub-domain-name-1\n│   │   │   ├── sub-domain-name-2\n│   │   │   └── <span class=\"token punctuation\">..</span>.\n│   │   └── <span class=\"token punctuation\">..</span>.\n│   ├── services\n│   │   ├── domain-name-1\n│   │   ├── domain-name-2\n│   │   │   ├── sub-domain-name-1\n│   │   │   ├── sub-domain-name-2\n│   │   │   └── <span class=\"token punctuation\">..</span>.\n│   │   └── <span class=\"token punctuation\">..</span>.\n│   └── web\n│       ├── ts-front-end\n│       └── ts-ui\n│── config\n└── playground</code></pre></div>\n<h3 id=\"originally-published-on-medium\"><a href=\"#originally-published-on-medium\" aria-label=\"originally published on medium permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Originally published on <a href=\"https://medium.com/red-gold/telar-social-media-architecture-using-domain-driven-design-for-microservices-319c514199e4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Medium</a>.</h3>","fields":{"slug":"/posts/Telar-Social-Media-Architecture-using-Domain-Driven-Design-for-Microservices","tagSlugs":["/tag/openfaas/","/tag/domain-driven-design/","/tag/microservices/","/tag/telar-social/","/tag/pub-sub/","/tag/cloud/"]},"frontmatter":{"date":"2019-12-22T22:40:32.169Z","description":"In this Article you will learn about Telar Social Architecture and how it helps to boost your productivity, development Speed, flexibility, scalability and so on. We are not going deep in DDD and Microservices but how we used them in Telar Social in a nutshell.","tags":["Openfaas","Domain Driven Design","Microservices","Telar Social","Pub Sub","Cloud"],"title":"Telar Social Media Architecture using Domain Driven Design for Microservices","socialImage":"https://miro.medium.com/max/3584/1*uV30nlYmFTW7hydT2EUSoQ.png"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/Telar-Social-Media-Architecture-using-Domain-Driven-Design-for-Microservices"}}}